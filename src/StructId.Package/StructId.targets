<Project>

  <ItemGroup>
    <!-- This is safe to do even if we're in a transitive targets file, since content files providing 
         these items won't exist in a transitive project. See https://github.com/NuGet/Home/issues/7420 -->
    <Compile Update="@(Compile)">
      <Visible Condition="'%(NuGetItemType)' == 'Compile' and '%(NuGetPackageId)' == 'StructId'">false</Visible>
      <Link Condition="'%(NuGetItemType)' == 'Compile' and '%(NuGetPackageId)' == 'StructId'">StructId\%(Filename)%(Extension)</Link>
    </Compile>

    <!-- Templates should always be added transitively since they are all file-local and their 
         syntax tree is required in the compilation for them to apply properly -->
    <StructId Include="$(MSBuildThisFileDirectory)Templates\*.cs"
              Link="StructId\Templates\%(Filename)%(Extension)"
              Visible="false"/>    
  </ItemGroup>

  <Target Name="AddStructId" DependsOnTargets="ResolveLockFileReferences" BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun">
    <!-- Feature detection -->
    <PropertyGroup>
      <UseDapper>false</UseDapper>
      <UseDapper Condition="'@(Reference -> WithMetadataValue('NuGetPackageId', 'Dapper'))' != ''">true</UseDapper>
      <UseEntityFramework>false</UseEntityFramework>
      <UseEntityFramework Condition="'@(Reference -> WithMetadataValue('NuGetPackageId', 'Microsoft.EntityFrameworkCore'))' != ''">true</UseEntityFramework>
      <UseUlid>false</UseUlid>
      <UseUlid Condition="'@(Reference -> WithMetadataValue('NuGetPackageId', 'Ulid'))' != ''">true</UseUlid>
    </PropertyGroup>
    <ItemGroup>
      <FeatureTemplatesToRemove Include="@(StructId -> WithMetadataValue('Filename', 'DapperTypeHandler'))" Condition="!$(UseDapper)" />
      <FeatureTemplatesToRemove Include="@(StructId -> WithMetadataValue('Filename', 'EntityFrameworkValueConverter'))" Condition="!$(UseEntityFramework)" />
      <FeatureTemplatesToRemove Include="@(StructId -> WithMetadataValue('Filename', 'NewableUlid'))" Condition="!$(UseUlid)" />
      <StructId Remove="@(FeatureTemplatesToRemove)" />
    </ItemGroup>
    <!-- Add final template items to project -->
    <ItemGroup>
      <Compile Include="%(StructId.FullPath)" />
    </ItemGroup>
  </Target>

</Project>