// <auto-generated/>
#nullable enable

using System;
using Newtonsoft.Json;

namespace StructId;

public static partial class StructIdConverters
{
    public class NewtonsoftJsonConverter<TSelf, TValue> : JsonConverter<TSelf>
        where TSelf : IStructId<TValue>, IParsable<TSelf>, INewable<TSelf, TValue>
        where TValue : struct
    {
        public override void WriteJson(JsonWriter writer, TSelf? id, JsonSerializer serializer) 
            => serializer.Serialize(writer, id == null ? null : id.Value);

        public override TSelf? ReadJson(JsonReader reader, Type objectType, TSelf? existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            var result = serializer.Deserialize<TValue?>(reader);
            return result.HasValue ? TSelf.New(result.Value) : default;
        }
    }

    public class NewtonsoftJsonConverter<TSelf> : JsonConverter<TSelf>
        where TSelf : IStructId, IParsable<TSelf>, INewable<TSelf>
    {
        public override void WriteJson(JsonWriter writer, TSelf? id, JsonSerializer serializer)
            => serializer.Serialize(writer, id == null ? null : id.Value);

        public override TSelf? ReadJson(JsonReader reader, Type objectType, TSelf? existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            var result = serializer.Deserialize<string?>(reader);
            return result is not null ? TSelf.New(result) : default;
        }
    }
}