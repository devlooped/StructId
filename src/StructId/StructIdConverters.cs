// <auto-generated />
#nullable enable

using System;
using System.ComponentModel;

namespace StructId;

/// <summary>
/// Type converters for <see cref="IStructId{T}"/> and <see cref="IStructId"/>.
/// </summary>
public static partial class StructIdConverters
{
    /// <summary>
    /// Base class for type converters for <see cref="IStructId"/>.
    /// </summary>
    /// <typeparam name="TSelf">Type of target struct id.</typeparam>
    public abstract class StringTypeConverter<TSelf> : TypeConverter where TSelf : IStructId
    {
        protected abstract TSelf Create(string value);

        /// <inheritdoc/>
        public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) => sourceType == typeof(string);

        /// <inheritdoc/>
        public override object? ConvertFrom(ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) => value switch
        {
            string s => Create(s),
            null => null,
            _ => throw new ArgumentException($"Cannot convert from {value} to {typeof(TSelf).Name}", nameof(value))
        };

        /// <inheritdoc/>
        public override object? ConvertTo(ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, Type destinationType)
        {
            if (destinationType == typeof(string))
            {
                return value switch
                {
                    string id => id,
                    TSelf id => id.Value,
                    null => null,
                    _ => throw new ArgumentException($"Cannot convert {value} to string", nameof(value))
                };
            }

            throw new ArgumentException($"Cannot convert {value ?? "(null)"} to {destinationType}", nameof(destinationType));
        }
    }
}