// <auto-generated/

using System;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace StructId;

public static partial class StructIdConverters
{
#if NET7_0_OR_GREATER
    public class SystemTextJsonConverter<TStruct, TValue> : JsonConverter<TStruct>
        where TStruct : IStructId<TValue>, INewable<TStruct, TValue>
        where TValue: struct, IParsable<TValue>
    {
        public override TStruct Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            => TStruct.New(TValue.Parse(reader.GetString() ?? throw new FormatException("Unsupported null value for struct id."), CultureInfo.InvariantCulture));

        public override void Write(Utf8JsonWriter writer, TStruct value, JsonSerializerOptions options)
        {
            switch (value.Value)
            {
                case Guid guid:
                    writer.WriteStringValue(guid);
                    break;
                case TValue inner:
                    writer.WriteRawValue(inner.ToString());
                    break;
                default:
                    throw new InvalidOperationException("Unsupported value type.");
            }
        }

        public override TStruct ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            => TStruct.New(TValue.Parse(reader.GetString() ?? throw new FormatException("Unsupported null value for struct id."), CultureInfo.InvariantCulture));

        public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, TStruct value, global::System.Text.Json.JsonSerializerOptions options)
            => writer.WritePropertyName(value.Value.ToString());
    }

    public class SystemTextJsonConverter<TStruct> : JsonConverter<TStruct>
        where TStruct : IStructId, IParsable<TStruct>, INewable<TStruct>
    {
        public override TStruct Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            => TStruct.New(reader.GetString() ?? throw new FormatException("Unsupported null value for struct id."));

        public override void Write(Utf8JsonWriter writer, TStruct value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.Value);

        public override TStruct ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
           => TStruct.New(reader.GetString() ?? throw new FormatException("Unsupported null value for struct id."));

        public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, TStruct value, global::System.Text.Json.JsonSerializerOptions options)
            => writer.WritePropertyName(value.Value);
    }
#endif
}