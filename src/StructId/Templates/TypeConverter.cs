// <auto-generated/>
#nullable enable

using System;
using System.ComponentModel;
using System.Globalization;
using StructId;

[TStructId]
[TypeConverter(typeof(TSelf.StringConverter))]
file readonly partial record struct TSelf(string Value)
{
    partial class StringConverter : TypeConverter
    {
        /// <inheritdoc />
        public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType)
            => sourceType == typeof(string) || sourceType == typeof(TSelf);

        /// <inheritdoc />
        public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value)
        {
            if (value == null)
                return default(TSelf);

            if (value is string typedValue)
                return TSelf.New(typedValue);

            throw new ArgumentException($"Cannot convert '{value}' to {nameof(TSelf)}", nameof(value));
        }

        /// <inheritdoc />
        public override bool CanConvertTo(ITypeDescriptorContext? context, Type? destinationType) 
            => destinationType == typeof(string) || destinationType == typeof(TSelf);

        /// <inheritdoc />
        public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType)
        {
            if (value != null)
            {
                if (destinationType == typeof(string))
                    return ((TSelf)value).Value;

                if (destinationType == typeof(TSelf))
                    return value;
            }

            throw new InvalidOperationException($"Cannot convert '{value}' to '{destinationType}'");
        }
    }
}

file partial record struct TSelf : INewable<TSelf, string>
{
    public static TSelf New(string value) => throw new NotImplementedException();
}