// <auto-generated/>
#nullable enable

using System;
using Newtonsoft.Json;

namespace StructId;

public static partial class StructIdConverters
{
    public class NewtonsoftJsonConverter<TStruct, TValue> : JsonConverter<TStruct>
        where TStruct : IStructId<TValue>, IParsable<TStruct>, INewable<TStruct, TValue>
        where TValue : struct
    {
        public override void WriteJson(JsonWriter writer, TStruct? id, JsonSerializer serializer) 
            => serializer.Serialize(writer, id == null ? null : id.Value);

        public override TStruct? ReadJson(JsonReader reader, Type objectType, TStruct? existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            var result = serializer.Deserialize<TValue?>(reader);
            return result.HasValue ? TStruct.New(result.Value) : default;
        }
    }

    public class NewtonsoftJsonConverter<TStruct> : JsonConverter<TStruct>
        where TStruct : IStructId, IParsable<TStruct>, INewable<TStruct>
    {
        public override void WriteJson(JsonWriter writer, TStruct? id, JsonSerializer serializer)
            => serializer.Serialize(writer, id == null ? null : id.Value);

        public override TStruct? ReadJson(JsonReader reader, Type objectType, TStruct? existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            var result = serializer.Deserialize<string?>(reader);
            return result is not null ? TStruct.New(result) : default;
        }
    }
}