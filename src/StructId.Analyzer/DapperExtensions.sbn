// <auto-generated />
#nullable enable

using System;
using System.ComponentModel;
using System.Data;
using Dapper;
using static Dapper.SqlMapper;

namespace {{ Namespace }};

/// <summary>
/// Provides extensions for Dapper.
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public static partial class DapperExtensions
{
    /// <summary>
    /// Registers type handlers for struct IDs.
    /// </summary>
    public static TConnection UseStructId<TConnection>(this TConnection connection) where TConnection : IDbConnection
    {
        {{~ for id in Ids ~}}
        if (!SqlMapper.HasTypeHandler(typeof({{ id.TSelf }})))
            SqlMapper.AddTypeHandler(new DapperTypeHandler{{ id.TValue }}<{{ id.TSelf }}>());

        {{~ end ~}}
        {{~ for id in CustomIds ~}}
        if (!SqlMapper.HasTypeHandler(typeof({{ id.TSelf }})))
            SqlMapper.AddTypeHandler(new DapperTypeHandler<{{ id.TSelf }}, {{ id.TValue }}, {{ id.THandler }}>());

        {{~ end ~}}
        {{~ for handler in CustomValues ~}}
        if (!SqlMapper.HasTypeHandler(typeof({{ handler.TValue }})))
            SqlMapper.AddTypeHandler(new {{ handler.THandler }}());

        {{~ end ~}}
        {{~ for handler in TemplatizedValueHandlers ~}}
        if (!SqlMapper.HasTypeHandler(typeof({{ handler.TValue }})))
            SqlMapper.AddTypeHandler(new {{ handler.THandler }}());

        {{~ end ~}}
        return connection;
    }

    partial class DapperTypeHandler<TSelf, TValue, THandler> : TypeHandler<TSelf>
        where TSelf : IStructId<TValue>, INewable<TSelf, TValue>
        where THandler : TypeHandler<TValue>, new()
        where TValue : struct
    {
        readonly THandler handler = new();

        public override TSelf? Parse(object value) => TSelf.New(handler.Parse(value));
        public override void SetValue(IDbDataParameter parameter, TSelf? value)
        {
            if (value?.Value is { } id)
                handler.SetValue(parameter, value?.Value ?? default);
            else
                parameter.Value = DBNull.Value;
        }
    }

    partial class DapperTypeHandlerInt64<TSelf> : TypeHandler<TSelf>
        where TSelf : IStructId<long>, INewable<TSelf, long>
    {
        public override void SetValue(IDbDataParameter parameter, TSelf? value)
        {
            if (value is null)
            {
                parameter.Value = DBNull.Value;
                return;
            }

            parameter.Value = value.Value;
        }

        public override TSelf Parse(object value)
        {
            return value switch
            {
                long l => TSelf.New(l),
                int i => TSelf.New(i),
                short s => TSelf.New(s),
                decimal d and < long.MaxValue and > long.MinValue => TSelf.New((long)d),
                string str when !string.IsNullOrEmpty(str) && long.TryParse(str, out var result) => TSelf.New(result),
                _ => throw new InvalidCastException($"Cannot handle value {value} of type {value.GetType()} as {typeof(TSelf).Name}."),
            };
        }
    }

    partial class DapperTypeHandlerInt32<TSelf> : TypeHandler<TSelf>
        where TSelf : IStructId<int>, INewable<TSelf, int>
    {
        public override void SetValue(IDbDataParameter parameter, TSelf? value)
        {
            if (value is null)
            {
                parameter.Value = DBNull.Value;
                return;
            }

            parameter.Value = value.Value;
        }

        public override TSelf Parse(object value)
        {
            return value switch
            {
                int i => TSelf.New(i),
                short s => TSelf.New(s),
                decimal d and < int.MaxValue and > int.MinValue => TSelf.New((int)d),
                string str when !string.IsNullOrEmpty(str) && int.TryParse(str, out var result) => TSelf.New(result),
                _ => throw new InvalidCastException($"Cannot handle value {value} of type {value.GetType()} as {typeof(TSelf).Name}."),
            };
        }
    }

    partial class DapperTypeHandlerGuid<TSelf> : TypeHandler<TSelf>
        where TSelf : IStructId<Guid>, INewable<TSelf, Guid>
    {
        public override void SetValue(IDbDataParameter parameter, TSelf? value)
        {
            if (value is null)
            {
                parameter.Value = DBNull.Value;
                return;
            }

            parameter.Value = value.Value;
        }

        public override TSelf Parse(object value)
        {
            return value switch
            {
                Guid guid => TSelf.New(guid),
                string str when !string.IsNullOrEmpty(str) && Guid.TryParse(str, out var result) => TSelf.New(result),
                _ => throw new InvalidCastException($"Cannot handle value {value} of type {value.GetType()} as {typeof(TSelf).Name}."),
            };
        }
    }

    partial class DapperTypeHandlerString<TSelf> : TypeHandler<TSelf>
        where TSelf : IStructId, INewable<TSelf>
    {
        public override void SetValue(IDbDataParameter parameter, TSelf? value)
        {
            if (value is null)
            {
                parameter.Value = DBNull.Value;
                return;
            }

            parameter.Value = value.Value;
        }

        public override TSelf Parse(object value)
        {
            return value switch
            {
                string str => TSelf.New(str),
                _ => throw new InvalidCastException($"Cannot handle value {value} of type {value.GetType()} as {typeof(TSelf).Name}."),
            };
        }
    }
}

{{~ for handler in TemplatizedValueHandlers ~}}
{{ handler.Code }}
{{~ end ~}}