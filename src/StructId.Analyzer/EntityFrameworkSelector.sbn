// <auto-generated />
#nullable enable

using System;
using System.ComponentModel;
using System.Collections.Concurrent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace StructId;

[EditorBrowsable(EditorBrowsableState.Never)]
public static class StructIdDbContextOptionsBuilderExtensions
{
    /// <summary>
    /// Configures the context to use struct id value converters as needed.
    /// </summary>
    public static DbContextOptionsBuilder UseStructId(this DbContextOptionsBuilder builder)
        => builder.ReplaceService<IValueConverterSelector, StructIdValueConverterSelector>();

    /// <summary>
    /// Configures the context to use struct id value converters as needed.
    /// </summary>
    public static DbContextOptionsBuilder<TContext> UseStructId<TContext>(this DbContextOptionsBuilder<TContext> builder) where TContext : DbContext
        => builder.ReplaceService<IValueConverterSelector, StructIdValueConverterSelector>();

    class StructIdValueConverterSelector : ValueConverterSelector
    {
        readonly ConcurrentDictionary<(Type ModelClrType, Type? ProviderClrType), ValueConverterInfo> converters = new();

        public StructIdValueConverterSelector(ValueConverterSelectorDependencies dependencies) : base(dependencies) { }

        public override IEnumerable<ValueConverterInfo> Select(Type modelClrType, Type? providerClrType = null)
        {
            var baseConverters = base.Select(modelClrType, providerClrType);
            foreach (var converter in baseConverters)
                yield return converter;

            modelClrType = Unwrap(modelClrType) ?? modelClrType;
            providerClrType = Unwrap(providerClrType);

            // Struct ID converters
            {{~ for id in Ids ~}}
            if (modelClrType == typeof({{ id.TSelf }}))
                yield return converters.GetOrAdd((modelClrType, providerClrType), key => new ValueConverterInfo(
                    key.ModelClrType, key.ProviderClrType ?? typeof({{ id.TId }}),
                    info => new {{ id.TSelf }}.EntityFrameworkValueConverter(info.MappingHints)));

            {{~ end ~}}
            // Custom EF converters
            {{~ for converter in Converters ~}}
            if (modelClrType == typeof({{ converter.TModel }}))
                yield return converters.GetOrAdd((modelClrType, providerClrType), key => new ValueConverterInfo(
                    key.ModelClrType, key.ProviderClrType ?? typeof({{ converter.TProvider }}),
                    info => new {{ converter.TConverter }}(info.MappingHints)));

            {{~ end ~}}
            // Templatized converters
            {{~ for converter in Templatized ~}}
            if (modelClrType == typeof({{ converter.TModel }}))
                yield return converters.GetOrAdd((modelClrType, providerClrType), key => new ValueConverterInfo(
                    key.ModelClrType, key.ProviderClrType ?? typeof(string),
                    info => new {{ converter.TConverter }}(info.MappingHints)));

            {{~ end ~}}
        }

        static Type? Unwrap(Type? type)
        {
            if (type is null) 
                return null;

            return Nullable.GetUnderlyingType(type) ?? type;
        }
    }
}

// Templatized converters
{{~ for converter in Templatized ~}}
{{ converter.Code }}
{{~ end ~}}